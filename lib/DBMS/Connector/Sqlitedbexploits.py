import sqlite3
import sys
import os
cur = os.getcwd()
sys.path.append(cur)
from INFO.common import tables
from INFO.common import columns
from logger.sqljlog import logger as sqljlog
from prettytable import PrettyTable

class Sqlite3DBMS:
    def __init__(self, database, tablename, column)->None:
        self.database = database
        self.tablename = tablename
        self.conn = sqlite3.connect(database)
        self.cursor = self.conn.cursor()
        self.column = column
        self._table = PrettyTable()
        self._table.field_names = []

    def _show_database_columns_info(self):
        try:
            self.cursor.execute(f"SELECT * FROM {self.tablename}")
            result = self.cursor.fetchall()
            for item in result:
                print(item)
                return item
        except sqlite3.OperationalError as exc:
            errmsg = str(exc)
            errmsg += "\n the above error message occurred while interacting with sqlite database."
            sqljlog.error(errmsg)

    def _display_info_of_database(self):
        self._table.clear_rows()  # Clear existing rows in the table
        self.cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
        tables = self.cursor.fetchall()
        for table_name in tables:
            self.cursor.execute(f"SELECT * FROM {table_name[0]};")
            rows = self.cursor.fetchall()
            for row in rows:
                try:
                    self._table.add_row(row)
                except ValueError:
                    pass
                #todo : complete here

            print(f"Table name: {table_name[0]}")
            print(self._table)
            print()
    
    def _table_info(self):
        self.cursor.execute(f"PRAGMA table_info({self.tablename});")
        result = self.cursor.fetchall()
        for item in result:
            self._table.add_row(item)
        print("Table info:")
        print(self._table)
        return
    
    def _view_column_info(self):
        self.cursor.execute(f"SELECT * FROM {self.tablename};")
        result = self.cursor.fetchall()
        for item in result:
            self._table.add_row(item)
        
        print("Table:%s \ninfo:"%self.tablename)
        print(self._table)
    
    @classmethod
    def sqlite_table_info(cls):
        return cls._display_info_of_database()
    
    @classmethod
    def sqlite_columns_info(cls):
        return cls._show_database_columns_info()
    
    @classmethod 
    def sqlite_database_info(cls):
        return cls._display_info_of_database()
    
    @classmethod
    def view_column_values(cls):
        return cls._view_column_info()
    
    @classmethod
    def table_info(cls):
        return cls._table_info()
    

obj = Sqlite3DBMS("your_database.db", "your_table", "gw")
obj._display_info_of_database()
