import sqlite3
import sys
import os
cur = os.getcwd()
sys.path.append(cur)
from INFO.common import tables
from INFO.common import columns
from logger.sqljlog import logger as sqljlog
from prettytable import PrettyTable
from lib.systempaths.dbpaths import get_databases_path_for_sqlite_exploit
from lib.extra.options import db_options
from lib.SQLJNGDataTypes.memlists import Memelist
from logger.sqljlog import logger as sqljlog
from random import choice

class Sqlite3DBMS:
    def __init__(self, database, tablename, column)->None:
        try:
            self.database = database
            self.tablename = tablename
            self.conn = sqlite3.connect(database)
            self.cursor = self.conn.cursor()
            self.column = column
            self._table = PrettyTable()
            self._table.field_names = []
        
        except sqlite3.OperationalError as exc:
            errmsg = str(exc)
            errmsg += "\n the above error message occurred while interacting with sqlite database."
            sqljlog.error(errmsg)

    def _show_database_columns_info(self):
        try:
            self.cursor.execute(f"SELECT * FROM {self.tablename}")
            result = self.cursor.fetchall()
            for item in result:
                self._table.add_row(item)
            
            print(self._table)
        except (sqlite3.OperationalError,sqlite3.DatabaseError,sqlite3.Error,sqlite3.ProgrammingError) as exc:
            errmsg = str(exc)
            errmsg += "\n the above error message occurred while interacting with sqlite database."
            sqljlog.error(errmsg)
        
        finally:
            self.conn.close()

    def _display_info_of_database(self):
        try:
            self._table.clear_rows()  # Clear existing rows in the table
            self.cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
            tables = self.cursor.fetchall()
            for table_name in tables:
                self.cursor.execute(f"SELECT * FROM {table_name[0]};")
                rows = self.cursor.fetchall()
                for row in rows:
                    try:
                        self._table.add_row(row)
                    except ValueError:
                        pass
                    #todo : complete here

                print(f"Table name: {table_name[0]}")
                print(self._table)
                print()
        except (sqlite3.Error,sqlite3.OperationalError)as exc:
            errmsg = str(exc)
            errmsg += "\n the above error message occurred while interacting with sqlite database."
            sqljlog.error(errmsg)
        finally:
            self.conn.close()

    
    def _table_info(self):
        try:
            self.cursor.execute(f"PRAGMA table_info({self.tablename});")
            result = self.cursor.fetchall()
            for item in result:
                self._table.add_row(item)
            print("Table info:")
            print(self._table)
        except sqlite3.OperationalError as exc:
            errmsg = str(exc)
            errmsg += "\n the above error message occurred while interacting with sqlite database."
            sqljlog.error(errmsg)
        
        finally:
            self.conn.close()

    
    def _view_column_info(self):
        try:
            self.cursor.execute(f"SELECT * FROM {self.tablename};")
            result = self.cursor.fetchall()
            for item in result:
                self._table.add_row(item)
            
            print("Table:%s \ninfo:"%self.tablename)
            print(self._table)
        except sqlite3.OperationalError as exc:
            errmsg = str(exc)
            errmsg += "\n the above error message occurred while interacting with sqlite database."
            sqljlog.error(errmsg)
        
        finally:
            self.conn.close()

    
    def sqlite_table_info(self):
        return self._display_info_of_database()
    
    def sqlite_columns_info(self):
        """ Display the columns info"""
        return self._show_database_columns_info()
    
    def sqlite_database_info(self):
        """Display the info of the database"""
        return self._display_info_of_database()
    
    def view_column_values(self):
        """Show all the columns value"""
        return self._view_column_info()
    
    def table_info(self):
        """Show all the tables"""
        return self._table_info()
    


def main_sqlite_section(*args,**kwargs):
    """Main section of sqlite database exploit(.db files)"""
    print(db_options)
    sqljlog.warning("Please wait while extracting the database names from the computer")

    paths = get_databases_path_for_sqlite_exploit()
    _ = Memelist(paths)
    gen = _.get_list_as_generator_exp(ls=_)
    for path in gen:
        sqljlog.info(path)
        sqlite_db_handler = Sqlite3DBMS(path,choice(tables),choice(columns))

        match input(">>>"):
            case "1":
                sqlite_db_handler.table_info()
            case "2":
                dbname = input("\nEnter the name of the .db table you want to explore if you :\t")
                sqlite_db_handler = Sqlite3DBMS(path,dbname if dbname is not "" else choice(tables),column="")
                sqlite_db_handler.sqlite_columns_info()
            case "3":
                sqlite_db_handler.sqlite_database_info()
            case "4":
                column_name = input("\nEnter the name of the .db column you want to explore if you :\t")
                sqlite_db_handler = Sqlite3DBMS(path,tablename="",column=column_name if column_name is not "" else choice(columns))
                sqlite_db_handler.view_column_values()
            case "5":
                sqlite_db_handler.table_info()  

# main_sqlite_section()     


    

# obj = Sqlite3DBMS("your_database.db", "your_table", "gw")
# obj._display_info_of_database()

# Sqlite3DBMS("/Users/alimirmohammad/Library/Containers/com.apple.stocks.widget/Data/CloudKit/9ca101754d46d930fbac9a0fa57c9e7c48c7a3ec/Records/Records.db", "your_table", "gw").sqlite_database_info()